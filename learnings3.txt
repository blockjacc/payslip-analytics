# Unified Chart System for Payslip Analytics App

## Overview
This document describes the unified chart system that solves the fundamental Chart.js alignment issue and provides consistent behavior across all analytics charts.

## The Alignment Problem (SOLVED)

### Issue Identified
The original implementation had a critical alignment problem: the first value/color segment was not reaching the first tick mark. This occurred because:
- Chart.js was using a linear scale with evenly spaced positions
- The code was trying to display logarithmic tick values
- Data was being positioned on the linear scale at actual values (e.g., 1208.35)
- But the first tick was visually positioned at a different linear position (e.g., 9087.949)

### Root Cause
Console logs revealed the mismatch:
```
Chart.js position at index 1: 9087.949 (linear position)
Actual tick value at index 1: 1208.35 (logarithmic value)
Data value: 1208.35 (Holiday pay)
```

## Unified Chart System Solution

### Core Architecture
All charts now use unified utilities from `src/utils/chartAxis.js`:
- **`getUnifiedStackedBarChart()`**: For simple single-value charts (shifts analytics)
- **`getUnifiedPayslipChart()`**: For multi-period, multi-field charts (payslip analytics)
- **`mapValueToLogPosition()`**: Core function that transforms data values to logarithmic positions

### Key Innovation: Logarithmic Position Mapping
```javascript
function mapValueToLogPosition(value, min, max) {
  const logMin = Math.log(min);
  const logMax = Math.log(max);
  const logValue = Math.log(value);
  const logPosition = ((logValue - logMin) / (logMax - logMin)) * 9 + 1;
  return (logPosition / 10) * max;
}
```

This function:
1. Converts values to logarithmic space
2. Maps them to the correct position on the linear scale
3. Ensures perfect alignment with tick marks

### Y-Axis Tick Generation (Unchanged)
```javascript
export function getSimpleYAxis(values) {
  const nonZero = values.filter(v => v > 0);
  const min = Math.min(...nonZero);
  const totalSum = nonZero.reduce((sum, v) => sum + v, 0);
  
  // 11 ticks: 0, min, then 9 more logarithmic steps to totalSum
  const ticks = [0, min];
  for (let i = 1; i <= 9; i++) {
    const t = min * Math.pow(totalSum / min, i / 9);
    ticks.push(Math.round(t));
  }
  ticks[10] = totalSum; // Ensure last tick is exactly the total sum
  
  return { min: 0, max: totalSum, ticks };
}
```

## Implementation Details

### Chart Configuration Standards
- **Type:** Linear scale with logarithmically-spaced custom tick values
- **Start:** Always at 0
- **First Tick Above 0:** Smallest non-zero value among all selected fields
- **Top Tick:** Total sum of all values (aggregate) or max period sum (separate)
- **Ticks:** Exactly 11 ticks total: [0, min, then 9 logarithmic steps to total sum]
- **Stacking Order:** Always lowest to highest values (bottom to top)
- **Legend:** Always displayed on the right
- **Font:** 'Open Sans' for all chart text

### Data Transformation Process
1. **Original Data:** Raw values from backend
2. **Tick Generation:** Create 11 logarithmic ticks using `getSimpleYAxis`
3. **Position Mapping:** Transform data values using `mapValueToLogPosition`
4. **Chart Rendering:** Use transformed positions for display
5. **Tooltip Display:** Show original values, not transformed positions

### Unified Chart Functions

#### For Payslip Analytics
```javascript
const chartConfig = getUnifiedPayslipChart({
  periods: this.periods,
  selectedFields: this.selectedFields,
  colors: this.colors,
  onBarClick: this.handleBarClick
});
```

#### For Shifts Analytics
```javascript
const chartConfig = getUnifiedStackedBarChart({
  label: 'Schedule Types',
  data: this.scheduleTypeCounts,
  colors: this.colors
});
```

## Updated Chart Components

### Analytics.vue (Payslip)
- Now uses `getUnifiedPayslipChart()`
- Handles multi-period, multi-field data
- Includes click handlers for drilldown

### ShiftsScheduleTypeAnalytics.vue
- Now uses `getUnifiedStackedBarChart()`
- Simplified single-period data structure
- Consistent with payslip behavior

### ShiftsAllocationAnalytics.vue
- Upgraded from old logarithmic scale to unified system
- Maintains all existing functionality
- Perfect alignment achieved

## Technical Benefits

### Alignment Solution
- **Problem:** First segment not reaching first tick
- **Solution:** Data values mapped to correct logarithmic positions on linear scale
- **Result:** Perfect alignment between segments and tick marks

### Consistent Behavior
- All charts use identical tick generation logic
- Same stacking order (lowest to highest)
- Unified tooltip handling
- Consistent visual styling

### DRY Principle
- Single source of truth for chart configuration
- Shared utilities across all chart types
- Reduced code duplication
- Easier maintenance

## Real-World Examples

### Payslip Analytics
- **Values:** [1157.92, 2077, 39.01] (Overtime, Regular, Absent)
- **Generated Ticks:** [0, 39, 64, 104, 171, 279, 457, 748, 1223, 2001, 3274]
- **Stacking Order:** Absent (39.01), Regular (2077), Overtime (1157.92)
- **Result:** Perfect alignment with logarithmic tick spacing

### Shifts Analytics
- **Values:** [148, 7, 1, 1, 1] (schedule type counts)
- **Generated Ticks:** [0, 1, 2, 3, 5, 9, 17, 29, 51, 90, 158]
- **Stacking Order:** Open Shift (1), Rest Day (1), Workshift (1), Flexible Hours (7), Uniform Working Days (148)
- **Result:** Consistent behavior with payslip charts

## Implementation Checklist

### For New Charts
- [ ] Use unified chart utilities (`getUnifiedStackedBarChart` or `getUnifiedPayslipChart`)
- [ ] Implement 11-tick logarithmic Y-axis with custom tick generation
- [ ] Ensure proper stacking order (lowest to highest values)
- [ ] Include legend on the right
- [ ] Use 'Open Sans' font throughout
- [ ] Implement proper tooltip handling with original values
- [ ] Test alignment between data segments and tick marks

### Validation Tests
- [ ] Verify first segment reaches first tick exactly
- [ ] Confirm stacking order matches value sorting
- [ ] Check tooltip values match original data
- [ ] Ensure consistent behavior across chart types

## Key Technical Notes

### Linear vs Logarithmic Scale
- **Why Linear:** Chart.js logarithmic scale doesn't reliably respect custom tick arrays
- **Solution:** Use linear scale with logarithmically-spaced tick values
- **Implementation:** Custom callback function maps Chart.js positions to exact values

### Position Mapping Mathematics
- **Challenge:** Transform actual values to logarithmic positions on linear scale
- **Formula:** `((log(value) - log(min)) / (log(max) - log(min))) * 9 + 1`
- **Scaling:** `(logPosition / 10) * max` to fit Chart.js linear scale

### Tooltip Handling
- **Issue:** Tooltips showing transformed positions instead of original values
- **Solution:** Separate data tracking for display vs positioning
- **Implementation:** Custom tooltip callbacks reference original data

---

**This unified chart system is now the foundation for all charting in the Payslip Analytics App. The alignment issue has been completely resolved, and all charts now display with perfect visual consistency and mathematical accuracy.**
