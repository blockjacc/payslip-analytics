# Charting Standards for Payslip Analytics App

## Stacked Bar Chart Logic (Payslip Analytics)

### 1. Chart Structure
- **Type:** Vertical stacked bar chart (Chart.js Bar with `stacked: true`)
- **X-Axis:**
  - For aggregate/single-period: one label, e.g., 'Total'
  - For separate/multi-period: one label per period (e.g., 'March 3, 2025 - March 17, 2025')
- **Y-Axis:**
  - **Type:** Linear (with logarithmically-spaced custom tick values)
  - **Start:** Always at 0
  - **First Tick Above 0:** Smallest non-zero value among all selected fields
  - **Top Tick:** Total sum of all values (for aggregate) or max period sum (for separate)
  - **Ticks:** Exactly 11 ticks total: [0, min, then 9 logarithmic steps to total sum]
  - **Tick Generation:** Custom `getSimpleYAxis` utility generates logarithmic values
  - **Tick Implementation:** Linear scale with `stepSize: max/10`, `count: 11`, and callback mapping
  - **No Chart.js auto-ticks**â€”our exact values are enforced via callback mapping
- **Bar Segments:**
  - Each selected field is a segment in the stack
  - All selected fields are always included, even if value is zero
  - Segments are stacked from lowest to highest value
- **Legend:** Always displayed on the right
- **Font:** 'Open Sans' for all chart text

### 2. Technical Implementation

#### Y-Axis Tick Logic
```javascript
// Utility function generates 11 logarithmic ticks
export function getSimpleYAxis(values) {
  const nonZero = values.filter(v => v > 0);
  const min = Math.min(...nonZero);
  const totalSum = nonZero.reduce((sum, v) => sum + v, 0);
  
  // 11 ticks: 0, min, then 9 more logarithmic steps to totalSum
  const ticks = [0, min];
  for (let i = 1; i <= 9; i++) {
    const t = min * Math.pow(totalSum / min, i / 9);
    ticks.push(Math.round(t));
  }
  ticks[10] = totalSum; // Ensure last tick is exactly the total sum
  
  return { min: 0, max: totalSum, ticks };
}
```

#### Chart Configuration
```javascript
scales: {
  y: {
    type: 'linear',
    min: 0,
    max: max,
    ticks: {
      stepSize: max / 10,
      count: 11,
      callback: function(value, index, values) {
        // Map Chart.js tick positions to our exact values
        if (index < ticks.length) {
          return ticks[index].toLocaleString('en-US');
        }
        return '';
      }
    }
  }
}
```

### 3. Data Handling
- **Aggregate View:**
  - Treat as a single-period 'separate' case for charting logic
  - All selected fields are stacked in one bar
  - Values array: all field values for the period
- **Separate View:**
  - Each period is a bar, fields are stacked segments
  - Values array: all field values across all periods
- **Field Names:**
  - Must match between backend and frontend
  - All selected fields must be present in the chart, even if value is zero

### 4. UI/UX Consistency
- **Button Styling:** Consistent with payslip pattern
- **Card Layout:** Consistent with payslip pattern
- **Routing:** Unified pattern for all analytics

### 5. Implementation Checklist
- [ ] Chart uses linear scale with custom logarithmic tick values
- [ ] Y-axis starts at 0, first tick is smallest value, top is total sum
- [ ] Exactly 11 ticks generated by `getSimpleYAxis` utility
- [ ] Tick callback maps Chart.js positions to our exact values
- [ ] All selected fields are always shown as segments
- [ ] Legend is on the right
- [ ] Font is 'Open Sans' everywhere
- [ ] Chart logic is unified for aggregate and separate

### 6. Example Implementation (Payslip)
- **Values:** [1157.92, 2077, 39.01]
- **Generated Ticks:** [0, 39, 64, 104, 171, 279, 457, 748, 1223, 2001, 3274]
- **Chart Display:** 11 evenly-spaced ticks with logarithmic values
- **Bar Segments:** Absent (39.01), Regular (2077), Overtime (1157.92) - stacked

### 7. Example Implementation (Shifts)
- **Values:** [148, 7, 1, 1, 1] (schedule type counts)
- **Generated Ticks:** [0, 1, 2, 3, 5, 9, 17, 29, 51, 90, 158]
- **Chart Display:** 11 evenly-spaced ticks with logarithmic values
- **Bar Segments:** Open Shift (1), Rest Day (1), Workshift (1), Flexible Hours (7), Uniform Working Days (148) - stacked

---

**This documentation is the predicate for all charting in this app. Any new chart or analytics view must follow these standards for consistency, clarity, and maintainability.**

### Key Technical Notes
1. **Linear vs Logarithmic Scale:** We use linear scale with logarithmically-spaced tick values because Chart.js logarithmic scale doesn't reliably respect custom tick arrays.
2. **Tick Enforcement:** The `callback` function maps Chart.js-generated tick positions to our exact logarithmic values.
3. **Consistent Utility:** All charts use the same `getSimpleYAxis` function for tick generation.
4. **No afterBuildTicks:** Chart.js callbacks like `afterBuildTicks` are unreliable; we use the tick callback approach instead.
