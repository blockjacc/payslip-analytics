
# Charting Standards for Payslip Analytics App

## Stacked Bar Chart Logic (Payslip Analytics)

### 1. Chart Structure
- **Type:** Vertical stacked bar chart (Chart.js Bar with `stacked: true`)
- **X-Axis:**
  - For aggregate/single-period: one label, e.g., 'Total'
  - For separate/multi-period: one label per period (e.g., 'March 3, 2025 - March 17, 2025')
- **Y-Axis:**
  - **Type:** Logarithmic
  - **Start:** Always at 0
  - **First Tick Above 0:** Smallest non-zero value among all selected fields
  - **Top Tick:** Total sum (for aggregate) or max period sum (for separate)
  - **Ticks:** Exactly 11 ticks (including 0 and the top), spaced logarithmically
  - **Tick Values:** [0, min, ..., max] (10 log steps between min and max)
  - **No extra ticks**—only these 11 are shown (enforced with `afterBuildTicks`)
- **Bar Segments:**
  - Each selected field is a segment in the stack
  - All selected fields are always included, even if value is zero
  - Smallest value is at the bottom, largest at the top
- **Legend:** Always displayed on the right
- **Font:** 'Open Sans' for all chart text

### 2. Data Handling
- **Aggregate View:**
  - Treat as a single-period 'separate' case for charting logic
  - All selected fields are stacked in one bar
- **Separate View:**
  - Each period is a bar, fields are stacked segments
- **Field Names:**
  - Must match between backend and frontend
  - All selected fields must be present in the chart, even if value is zero

### 3. UI/UX Consistency
- **Button Styling:** Consistent with payslip pattern
- **Card Layout:** Consistent with payslip pattern
- **Routing:** Unified pattern for all analytics

### 4. Implementation Checklist
- [ ] Chart is a single vertical stacked bar for aggregate, multiple for separate
- [ ] Y-axis starts at 0, first tick is smallest value, top is total, 11 ticks only
- [ ] All selected fields are always shown as segments
- [ ] Legend is on the right
- [ ] Font is 'Open Sans' everywhere
- [ ] Chart logic is unified for aggregate and separate

### 5. Example (Aggregate)
- **Y-Axis Ticks:** 0, 34,829, 61,904, 110,025, 195,554, 347,569, 617,754, 1,097,968, 1,951,480, 3,468,474, 6,164,712
- **Bar Segments:** Night Shift, Overtime, Regular (stacked)

---

**This documentation is the predicate for all charting in this app. Any new chart or analytics view must follow these standards for consistency, clarity, and maintainability.**

Stemming from: 

### Original Logarithmic Y-Axis Logic (Correct)

1. **Bar Segments:**
   - Smallest value (e.g., Night Shift: 34,829.22) is at the bottom of the bar.
   - Largest value (e.g., Regular: 5,645,403.74) is at the top.
   - All segments are stacked in the correct order.

2. **Y-Axis Ticks:**
   - The first increment above zero is the smallest non-zero value (e.g., 34,829.22).
   - The topmost y-axis tick is the total sum (e.g., 6,164,711.74).
   - There are 10 y-axis lines, spaced logarithmically between the smallest value and the total.

3. **Visual Clarity:**
   - Each segment is visible and proportional, even on a log scale.
   - The chart is easy to interpret, and the y-axis is meaningful for payroll analytics.

---

### What Went Wrong

- The current chart logic is using a default logarithmic scale, which does not set the first increment to the smallest value or the top to the total.
- This causes the smallest segment to visually dominate, and the others to be compressed.

---

### What Needs to Be Done

- Restore the custom logic for the y-axis:
  - Set the minimum (first increment) to the smallest non-zero value.
  - Set the maximum (top line) to the total sum.
  - Generate 10 logarithmically spaced ticks between these values.

---

Thank you for the precise feedback. You are correct—the y-axis should:

1. **Start from 0** (so the bar is visually anchored at the bottom).
2. **First line above 0 should be the smallest non-zero value** (so the smallest segment is always visible).
3. **There should be exactly 10 y-axis lines/ticks** (including the top, which is the total).
4. **No extra ticks**—just 10, spaced logarithmically between the smallest value and the total.



- Set `min: 0` for the y-axis.
- Generate exactly 10 logarithmically spaced ticks: 0, smallest value, ..., total.
- Pass these as the only allowed tick values to Chart.js.

- Chart.js’s `ticks.values` is being set to an array of 11 values (0 + 10 logarithmic steps), but Chart.js may interpolate or add additional ticks based on its own logic, especially on a log scale.

### How to Fix
- Use the `afterBuildTicks` callback in the y-axis options to strictly enforce only the 11 ticks (0 + 10 steps) you want.
- This will override Chart.js’s default tick generation and display only your custom ticks.
